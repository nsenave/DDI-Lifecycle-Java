/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to
 * https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

version = "0.1.0-SNAPSHOT"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    //
    mavenLocal()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.xmlbeans:xmlbeans:5.2.0")
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("org.apache.logging.log4j:log4j-core:2.21.1")

    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

sourceSets {
    main {
        java {
            srcDir("src/main/java")
        }
        resources {
            srcDir("src/main/resources")
            srcDir("src/main/ddi-sources")
        }
    }
}

tasks.register("generateSources", type = JavaExec::class) {
    group = "build"
    description = "Generate java sources from DDI xsd"
    classpath = sourceSets["main"].compileClasspath
    mainClass = "org.apache.xmlbeans.impl.tool.SchemaCompiler"
    args(
            "-srconly",
            "-src",
            sourceSets["main"].java.sourceDirectories.asPath,
            "-d",
            sourceSets["main"].resources.sourceDirectories.toList()[0].toPath(),
            sourceSets["main"].resources.sourceDirectories.toList()[1].toPath()
    )
}

tasks.named("generateSources").configure {
    onlyIf {
        fileTree(sourceSets["main"].resources.sourceDirectories.toList()[0]) {
            include("**/*.xsb")
        }.isEmpty
    }
}

tasks.named("compileJava") {
    dependsOn("generateSources")
}

tasks.withType<Copy> {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register("printVersion") {
    doLast {
        println(project.version)
    }
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = "io.github.nsenave"
            artifactId = "ddi-lifecycle"
            version = project.version.toString()

            from(components["java"])
        }
    }
}
